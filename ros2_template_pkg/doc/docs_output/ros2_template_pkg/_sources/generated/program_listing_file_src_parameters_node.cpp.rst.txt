
.. _program_listing_file_src_parameters_node.cpp:

Program Listing for File parameters_node.cpp
============================================

|exhale_lsh| :ref:`Return to documentation for file <file_src_parameters_node.cpp>` (``src/parameters_node.cpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   // Copyright 2022 Australian Centre for Field Robotics
   //
   // Redistribution and use in source and binary forms, with or without
   // modification, are permitted provided that the following conditions are met:
   //
   //    * Redistributions of source code must retain the above copyright
   //      notice, this list of conditions and the following disclaimer.
   //
   //    * Redistributions in binary form must reproduce the above copyright
   //      notice, this list of conditions and the following disclaimer in the
   //      documentation and/or other materials provided with the distribution.
   //
   //    * Neither the name of the Australian Centre for Field Robotics nor the names of its
   //      contributors may be used to endorse or promote products derived from
   //      this software without specific prior written permission.
   //
   // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
   // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
   // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
   // ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
   // LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
   // CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
   // SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
   // INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
   // CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   // POSSIBILITY OF SUCH DAMAGE.
   #include <chrono>
   #include <string>
   #include <functional>

   #include <rclcpp/rclcpp.hpp>

   using namespace std::chrono_literals;

   class ParametersClass: public rclcpp::Node
   {
     public:
       ParametersClass()
         : Node("parameter_node")
       {
         this->declare_parameter<std::string>("my_parameter", "world");

         timer_ = this->create_wall_timer(
         1000ms, std::bind(&ParametersClass::respond, this));
       }
       void respond()
       {
         this->get_parameter("my_parameter", parameter_string_);

         RCLCPP_INFO(this->get_logger(), "Hello %s", parameter_string_.c_str());
       }
     private:
       std::string parameter_string_;
       rclcpp::TimerBase::SharedPtr timer_;
   };

   int main(int argc, char** argv)
   {
     rclcpp::init(argc, argv);
     rclcpp::spin(std::make_shared<ParametersClass>());
     rclcpp::shutdown();
     return 0;
   }
