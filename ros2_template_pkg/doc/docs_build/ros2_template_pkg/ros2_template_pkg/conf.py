# Copyright 2022 Australian Centre for Field Robotics
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#
#    * Neither the name of the Australian Centre for Field Robotics nor the names of its
#      contributors may be used to endorse or promote products derived from
#      this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.


## Generated by rosdoc2.verbs.build.builders.SphinxBuilder.
## This conf.py imports the user defined (or default if none was provided)
## conf.py, extends the settings to support Breathe and Exhale and to set up
## intersphinx mappings correctly, among other things.

import sys

## exec the user's conf.py to bring all of their settings into this file.
exec(open("/home/jerome/dev_ws/src/ros2_template_pkg/ros2_template_pkg/doc/docs_build/ros2_template_pkg/ros2_template_pkg/default_sphinx_project/conf.py").read())

def ensure_global(name, default):
    if name not in globals():
        globals()[name] = default

## Based on the rosdoc2 settings, do various things to the settings before
## letting Sphinx continue.

ensure_global('rosdoc2_settings', {})
ensure_global('extensions', [])

if rosdoc2_settings.get('enable_autodoc', True):
    print('[rosdoc2] enabling autodoc', file=sys.stderr)
    extensions.append('sphinx.ext.autodoc')

if rosdoc2_settings.get('enable_intersphinx', True):
    print('[rosdoc2] enabling intersphinx', file=sys.stderr)
    extensions.append('sphinx.ext.intersphinx')

if rosdoc2_settings.get('enable_breathe', True):
    # Configure Breathe.
    # Breathe ingests the XML output from Doxygen and makes it accessible from Sphinx.
    print('[rosdoc2] enabling breathe', file=sys.stderr)
    ensure_global('breathe_projects', {})
    breathe_projects.update({
        "ros2_template_pkg Doxygen Project": "/home/jerome/dev_ws/src/ros2_template_pkg/ros2_template_pkg/doc/docs_build/ros2_template_pkg/output_staging/generated/doxygen/xml"
    })
    if breathe_projects:
        # Enable Breathe and arbitrarily select the first project.
        extensions.append('breathe')
        breathe_default_project = next(iter(breathe_projects.keys()))

if rosdoc2_settings.get('enable_exhale', True):
    # Configure Exhale.
    # Exhale uses the output of Doxygen and Breathe to create easier to browse pages
    # for classes and functions documented with Doxygen.
    # This is similar to the class hierarchies and namespace listing provided by
    # Doxygen out of the box.
    print('[rosdoc2] enabling exhale', file=sys.stderr)
    extensions.append('exhale')
    ensure_global('exhale_args', {})

    default_exhale_specs_mapping = {
        'page': [':content-only:'],
        **dict.fromkeys(
            ['class', 'struct'],
            [':members:', ':protected-members:', ':undoc-members:']),
    }

    exhale_specs_mapping = rosdoc2_settings.get(
        'exhale_specs_mapping', default_exhale_specs_mapping)

    from exhale import utils
    exhale_args.update({
        # These arguments are required.
        "containmentFolder": "/home/jerome/dev_ws/src/ros2_template_pkg/ros2_template_pkg/doc/docs_build/ros2_template_pkg/ros2_template_pkg/default_sphinx_project/generated",
        "rootFileName": "index.rst",
        "doxygenStripFromPath": "..",
        # Suggested optional arguments.
        "createTreeView": True,
        "fullToctreeMaxDepth": 1,
        "unabridgedOrphanKinds": [],
        "fullApiSubSectionTitle": "Reference",
        # TIP: if using the sphinx-bootstrap-theme, you need
        # "treeViewIsBootstrap": True,
        "exhaleExecutesDoxygen": False,
        # Maps markdown files to the "md" lexer, and not the "markdown" lexer
        # Pygments registers "md" as a valid markdown lexer, and not "markdown"
        "lexerMapping": {r".*\.(md|markdown)$": "md",},
        "customSpecificationsMapping": utils.makeCustomSpecificationsMapping(
            lambda kind: exhale_specs_mapping.get(kind, [])),
    })

if rosdoc2_settings.get('override_theme', True):
    extensions.append('sphinx_rtd_theme')
    html_theme = 'sphinx_rtd_theme'
    print(f"[rosdoc2] overriding theme to be '{html_theme}'", file=sys.stderr)

if rosdoc2_settings.get('automatically_extend_intersphinx_mapping', True):
    print(f"[rosdoc2] extending intersphinx mapping", file=sys.stderr)
    if 'sphinx.ext.intersphinx' not in extensions:
        raise RuntimeError(
            "Cannot extend intersphinx mapping if 'sphinx.ext.intersphinx' "
            "has not been added to the extensions")
    ensure_global('intersphinx_mapping', {
        
    })

if rosdoc2_settings.get('support_markdown', True):
    print(f"[rosdoc2] adding markdown parser", file=sys.stderr)
    # The `myst_parser` is used specifically if there are markdown files
    # in the sphinx project
    # TODO(aprotyas): Migrate files under the `include` tag in the project's Doxygen
    # configuration into the Sphinx project tree used to run the Sphinx builder in.
    extensions.append('myst_parser')
